package datastructuresproject3;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author ASUS
 */
public class Main extends javax.swing.JFrame {

    private Map<Position, Integer> userRecords; // Declaration of userRecords map to store user data
    private Map<Integer, Movie> movieRecords; // Declaration of movieRecords map to store movie data
    private File mainDataFile, targetUserFile, moviesFile; // Declaration of mainDataFile, targetUserFile, and moviesFile variables to store file paths

    /**
     * Creates new form Main
     */
    public Main() throws IOException {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        targetPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        comboTargetUser = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnGetTargetRecom = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        targetTable = new javax.swing.JTable();
        spinnerTargetX = new javax.swing.JSpinner();
        spinnerTargetK = new javax.swing.JSpinner();
        moviesPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnGetMovieRecom = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        moviesTable = new javax.swing.JTable();
        spinnerMoviesX = new javax.swing.JSpinner();
        spinnerMoviesK = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        comboFilm2 = new javax.swing.JComboBox<>();
        spinner2 = new javax.swing.JSpinner();
        comboFilm3 = new javax.swing.JComboBox<>();
        spinner3 = new javax.swing.JSpinner();
        comboFilm4 = new javax.swing.JComboBox<>();
        spinner4 = new javax.swing.JSpinner();
        comboFilm5 = new javax.swing.JComboBox<>();
        spinner1 = new javax.swing.JSpinner();
        spinner5 = new javax.swing.JSpinner();
        comboFilm1 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBorder(new javax.swing.border.MatteBorder(null));

        targetPanel.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Target User:");
        jLabel1.setToolTipText("");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        comboTargetUser.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        comboTargetUser.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("X: ");
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("K: ");
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnGetTargetRecom.setBackground(new java.awt.Color(204, 204, 204));
        btnGetTargetRecom.setText("Get Recommendations");
        btnGetTargetRecom.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnGetTargetRecom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetTargetRecomActionPerformed(evt);
            }
        });

        targetTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Title", "Genres"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(targetTable);
        if (targetTable.getColumnModel().getColumnCount() > 0) {
            targetTable.getColumnModel().getColumn(0).setMaxWidth(200);
        }

        javax.swing.GroupLayout targetPanelLayout = new javax.swing.GroupLayout(targetPanel);
        targetPanel.setLayout(targetPanelLayout);
        targetPanelLayout.setHorizontalGroup(
            targetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(targetPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(targetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(targetPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(comboTargetUser, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spinnerTargetX, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spinnerTargetK, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(btnGetTargetRecom, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        targetPanelLayout.setVerticalGroup(
            targetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(targetPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(targetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(btnGetTargetRecom, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerTargetK)
                    .addComponent(spinnerTargetX)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboTargetUser, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Target User", targetPanel);

        moviesPanel.setBackground(java.awt.Color.lightGray);

        jLabel4.setText("X:");

        jLabel5.setText("K: ");

        btnGetMovieRecom.setBackground(new java.awt.Color(204, 204, 204));
        btnGetMovieRecom.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnGetMovieRecom.setForeground(new java.awt.Color(51, 51, 51));
        btnGetMovieRecom.setText("Get Recommendations");
        btnGetMovieRecom.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnGetMovieRecom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetMovieRecomActionPerformed(evt);
            }
        });

        moviesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Title", "Genres"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(moviesTable);
        if (moviesTable.getColumnModel().getColumnCount() > 0) {
            moviesTable.getColumnModel().getColumn(0).setMaxWidth(200);
        }

        spinnerMoviesX.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        spinnerMoviesX.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));

        spinnerMoviesK.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        spinnerMoviesK.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        comboFilm2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));

        comboFilm3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));

        comboFilm4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));

        comboFilm5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));

        comboFilm1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboFilm5, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboFilm4, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboFilm2, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboFilm3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboFilm1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spinner3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinner1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinner2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinner4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinner5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboFilm1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboFilm2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboFilm3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboFilm4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboFilm5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinner5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout moviesPanelLayout = new javax.swing.GroupLayout(moviesPanel);
        moviesPanel.setLayout(moviesPanelLayout);
        moviesPanelLayout.setHorizontalGroup(
            moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(moviesPanelLayout.createSequentialGroup()
                .addGroup(moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(moviesPanelLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spinnerMoviesX, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerMoviesK, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnGetMovieRecom, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(101, 101, 101)
                        .addComponent(jLabel6))
                    .addGroup(moviesPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 669, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        moviesPanelLayout.setVerticalGroup(
            moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(moviesPanelLayout.createSequentialGroup()
                .addGroup(moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(moviesPanelLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerMoviesX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerMoviesK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(moviesPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(moviesPanelLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnGetMovieRecom, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Movies", moviesPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGetTargetRecomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetTargetRecomActionPerformed
        int x = (int) spinnerTargetX.getValue(); // Get the value of x from the spinner
        int k = (int) spinnerTargetK.getValue(); // Get the value of k from the spinner

        if (x * k > 5401) { // Check if the product of x and k exceeds the number of movies
            JOptionPane.showMessageDialog(null, "The product of x and k cannot exceed the number of movies. Please choose smaller values!");
            return; // Display an error message and return from the method
        }

        String[] split = ("" + comboTargetUser.getSelectedItem()).split(" "); // Split the selected item from comboTargetUser to extract the target user ID
        int targetUserID = Integer.parseInt(split[1]); // Parse the target user ID from the split array

        String[][] data = getRecommendationData(targetUserID, x, k); // Get the recommendation data for the target user ID, x, and k

        String[] headers = {"ID", "Title", "Genres"};
        DefaultTableModel tableModel = new DefaultTableModel(data, headers); // Create a table model with the recommendation data and headers
        targetTable.setModel(tableModel); // Set the table model for the targetTable
        targetTable.getColumnModel().getColumn(0).setMaxWidth(200); // Set the maximum width of the first column in the table


    }//GEN-LAST:event_btnGetTargetRecomActionPerformed

    private void btnGetMovieRecomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetMovieRecomActionPerformed
        int x = (int) spinnerMoviesX.getValue(); // Get the value of x from the spinner
        int k = (int) spinnerMoviesK.getValue(); // Get the value of k from the spinner

        if (x * k > 5401) { // Check if the product of x and k exceeds the number of movies
            JOptionPane.showMessageDialog(null, "The product of x and k cannot exceed"
                    + " the number of movies. Please choose smaller values!");
            return; // Display an error message and return from the method
        }

        ArrayList<Movie> comboMovies = new ArrayList<>(); // Create an ArrayList to store the selected combo box movies  
        comboMovies.add((Movie) comboFilm1.getSelectedItem()); // Get the selected movie from comboFilm1 and add it to the ArrayList
        comboMovies.add((Movie) comboFilm2.getSelectedItem()); // Get the selected movie from comboFilm2 and add it to the ArrayList
        comboMovies.add((Movie) comboFilm3.getSelectedItem()); // Get the selected movie from comboFilm3 and add it to the ArrayList
        comboMovies.add((Movie) comboFilm4.getSelectedItem()); // Get the selected movie from comboFilm4 and add it to the ArrayList
        comboMovies.add((Movie) comboFilm5.getSelectedItem()); // Get the selected movie from comboFilm5 and add it to the ArrayList

        ArrayList<Integer> spinnerValues = new ArrayList<>(); // Create an ArrayList to store the spinner values
        spinnerValues.add((int) spinner1.getValue()); // Get the value of spinner1 and add it to the ArrayList
        spinnerValues.add((int) spinner2.getValue()); // Get the value of spinner2 and add it to the ArrayList
        spinnerValues.add((int) spinner3.getValue()); // Get the value of spinner3 and add it to the ArrayList 
        spinnerValues.add((int) spinner4.getValue()); // Get the value of spinner4 and add it to the ArrayList
        spinnerValues.add((int) spinner5.getValue()); // Get the value of spinner5 and add it to the ArrayList

        for (int i = 0; i < 5; i++) {
            userRecords.put(new Position(10000, comboMovies.get(i).getId()), spinnerValues.get(i));
        }
        // Update the userRecords map with the selected movies and their corresponding spinner values

        String[][] data = getRecommendationData(10000, x, k); // Get the recommendation data for user 10000, x, and k

        for (int i = 0; i < 5; i++) {
            userRecords.remove(new Position(10000, comboMovies.get(i).getId()));
        }
        // Remove the temporary user records added earlier

        String[] headers = {"ID", "Title", "Genres"};
        DefaultTableModel tableModel = new DefaultTableModel(data, headers); // Create a table model with the recommendation data and headers
        moviesTable.setModel(tableModel); // Set the table model for the moviesTable
        moviesTable.getColumnModel().getColumn(0).setMaxWidth(200); // Set the maximum width of the first column in the table

    }//GEN-LAST:event_btnGetMovieRecomActionPerformed

    void initFrame() throws FileNotFoundException, IOException {
        File directory = new File(System.getProperty("user.dir"));
        mainDataFile = new File(directory.getAbsolutePath() + "\\src\\datastructuresproject3\\" + "main_data.csv");
        targetUserFile = new File(directory.getAbsolutePath() + "\\src\\datastructuresproject3\\" + "target_user.csv");
        moviesFile = new File(directory.getAbsolutePath() + "\\src\\datastructuresproject3\\" + "movies.csv");

        if (!mainDataFile.exists() || !targetUserFile.exists() || !moviesFile.exists()) {
            mainDataFile = Utility.getFile("Open the main_data.csv file"); // Prompt user to select the main_data.csv file
            targetUserFile = Utility.getFile("Open the target_user.csv file"); // Prompt user to select the target_user.csv file
            moviesFile = Utility.getFile("Open the movies.csv file"); // Prompt user to select the movies.csv file

            if (mainDataFile == null || targetUserFile == null || moviesFile == null) {
                System.out.println("You must select all 3 files."); // Display an error message if any of the files are not selected
                return;
            }
        }

        setUpUserMap(); // Set up the UserMap() method in the frame
        setUpMovies(); // Set up the Movies() method in the frame
        setUpTargetUserCombobox(); // Set up the TargetUserCombobox() method in the frame
        setUpSpinners(); // Set up the Spinners() method in the frame
        setUpMoviesCombobox(); // Set up the MoviesCombobox() method in the frame
    }

    String[][] getRecommendationData(int targetId, int x, int k) {
        MaxHeap<UserSimilarity> heap = new MaxHeap<>(700);

        // Find the x most similar users to the target user
        for (int i = 1; i <= 600; i++) {
            heap.insert(Utility.cosineSimilarity(userRecords, targetId, i));
        }
        heap.topDownHeapify(0);

        UserSimilarity[] mostSimilarUsers = new UserSimilarity[x];
        for (int i = 0; i < x; i++) {
            mostSimilarUsers[i] = heap.deleteMax();
            heap.topDownHeapify(0);
        }

        // Get the highest-rated movies from the most similar users
        ArrayList<Integer> movieIdRecom = new ArrayList<>();
        for (UserSimilarity us : mostSimilarUsers) {
            movieIdRecom.addAll(getHighestRatedMoviesOfUser(us.userId, k));
        }

        // Retrieve movie objects based on their IDs
        ArrayList<Movie> movieObjRecom = new ArrayList<>();
        for (int id : movieIdRecom) {
            movieObjRecom.add(movieRecords.get(id));
        }

        // Convert movie objects to a 2D array for data representation
        String[][] data = new String[movieObjRecom.size()][3];
        for (int i = 0; i < movieObjRecom.size(); i++) {
            Movie current = movieObjRecom.get(i);
            data[i][0] = "" + current.getId();
            data[i][1] = current.getTitle();
            data[i][2] = current.getGenres();
        }

        return data;
    }

    ArrayList<Integer> getHighestRatedMoviesOfUser(int userId, int k) {

        ArrayList<Integer> result = new ArrayList<>();
        // Iterate over the movie ratings for the given user ID
        for (int i = 1; i <= 9018; i++) {
            // Check if the rating for the current movie is null
            if (userRecords.get(new Position(userId, i)) == null) {
                continue; // Skip to the next iteration if the rating is null
            }

            int rating = userRecords.get(new Position(userId, i));
            // Check if the rating is 5 (highest rating)
            if (rating == 5) {
                result.add(i); // Add the movie ID to the result list
            }
            // Check if the desired number of recommendations (k) is reached
            if (result.size() >= k) {
                return result; // Return the result list if the desired number is reached
            }
        }
        // Repeat the above process for ratings 4, 3, 2, and 1 (in descending order)
        for (int i = 1; i <= 9018; i++) {
            if (userRecords.get(new Position(userId, i)) == null) {
                continue;
            }

            int rating = userRecords.get(new Position(userId, i));
            if (rating == 4) {
                result.add(i);
            }
            if (result.size() >= k) {
                return result;
            }
        }

        for (int i = 1; i <= 9018; i++) {
            if (userRecords.get(new Position(userId, i)) == null) {
                continue;
            }

            int rating = userRecords.get(new Position(userId, i));
            if (rating == 3) {
                result.add(i);
            }
            if (result.size() >= k) {
                return result;
            }
        }

        for (int i = 1; i <= 9018; i++) {
            if (userRecords.get(new Position(userId, i)) == null) {
                continue;
            }

            int rating = userRecords.get(new Position(userId, i));
            if (rating == 2) {
                result.add(i);
            }
            if (result.size() >= k) {
                return result;
            }
        }

        for (int i = 1; i <= 9018; i++) {
            if (userRecords.get(new Position(userId, i)) == null) {
                continue;
            }

            int rating = userRecords.get(new Position(userId, i));
            if (rating == 1) {
                result.add(i);
            }
            if (result.size() >= k) {
                return result;
            }
        }

        return result;
    }

    void setUpSpinners() {
        // Set up spinner models for spinner1, spinner2, spinner3, spinner4, and spinner5
        SpinnerModel spinner1Model = new SpinnerNumberModel(1, 1, 5, 1);
        SpinnerModel spinner2Model = new SpinnerNumberModel(1, 1, 5, 1);
        SpinnerModel spinner3Model = new SpinnerNumberModel(1, 1, 5, 1);
        SpinnerModel spinner4Model = new SpinnerNumberModel(1, 1, 5, 1);
        SpinnerModel spinner5Model = new SpinnerNumberModel(1, 1, 5, 1);

        // Set up spinner models for spinnerTargetX and spinnerMoviesX
        SpinnerModel xTargetSpinnerModel = new SpinnerNumberModel(1, 1, 600, 1);
        SpinnerModel xMoviesSpinnerModel = new SpinnerNumberModel(1, 1, 600, 1);

        // Set up spinner models for spinnerTargetK and spinnerMoviesK
        SpinnerModel kTargetSpinnerModel = new SpinnerNumberModel(1, 1, 5401, 1);
        SpinnerModel kMoviesSpinnerModel = new SpinnerNumberModel(1, 1, 5401, 1);

        // Assign the spinner models to the respective spinners
        spinner1.setModel(spinner1Model);
        spinner2.setModel(spinner2Model);
        spinner3.setModel(spinner3Model);
        spinner4.setModel(spinner4Model);
        spinner5.setModel(spinner5Model);

        spinnerTargetX.setModel(xTargetSpinnerModel);
        spinnerMoviesX.setModel(xMoviesSpinnerModel);

        spinnerTargetK.setModel(kTargetSpinnerModel);
        spinnerMoviesK.setModel(kMoviesSpinnerModel);
    }

    void setUpUserMap() throws FileNotFoundException, IOException {

        userRecords = new HashMap<>();// Initialize the userRecords hashmap

        // Read the main data file and populate the userRecords hashmap
        BufferedReader br = new BufferedReader(new FileReader(mainDataFile));
        int row = 1;
        String line;
        br.readLine();// Skip the header line
        while ((line = br.readLine()) != null) {
            String[] values = line.split(",");
            for (int col = 1; col < values.length; col++) {
                int value = Integer.parseInt(values[col]);
                if (value != 0) {
                    // Add the user rating to the userRecords hashmap
                    userRecords.put(new Position(row, col), value);
                }
            }
            row++;
        }

        // Read the target user file and add the target users to the userRecords hashmap
        br = new BufferedReader(new FileReader(targetUserFile));
        row = 1;
        br.readLine(); //Skip the header line
        while ((line = br.readLine()) != null) {
            String[] values = line.split(",");
            for (int col = 1; col < values.length; col++) {
                int value = Integer.parseInt(values[col]);
                if (value != 0) {
                    // Add the target user rating to the userRecords hashmap
                    userRecords.put(new Position(row + 600, col), value);
                }
            }
            row++;
        }
    }

    void setUpMovies() throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(new FileReader(moviesFile)); // Read the movies file
        movieRecords = new HashMap<>(); // Initialize the movieRecords hashmap
        br.readLine(); // Skip the header line
        String line;

        while ((line = br.readLine()) != null) {
            String[] split = line.split(","); // Split the line by commas
            String title = "";

            // Concatenate the movie title from the split array elements
            for (int j = 1; j < split.length - 1; j++) {
                title += split[j];
            }

            int movieId = Integer.parseInt(split[0]); // Extract the movie ID from the first element
            String genre = split[split.length - 1]; // Extract the genre from the last element

            movieRecords.put(movieId, new Movie(movieId, title, genre)); // Create a new Movie object and add it to the movieRecords hashmap
        }
    }

    void setUpTargetUserCombobox() {
        for (int i = 601; i <= 610; i++) {
            comboTargetUser.addItem("ID: " + i); // Add each target user ID to the comboTargetUser combobox
        }
    }

    Movie getRandomMovie() {
        int rand = (int) (Math.random() * 9018 + 1); // Generate a random number between 1 and 9018
        while (movieRecords.get(rand) == null) {
            rand = (int) (Math.random() * 9018 + 1); // If the movie with the generated ID doesn't exist, generate a new random number
        }

        return movieRecords.get(rand); // Return the randomly selected Movie object
    }

    boolean movieIsInArray(Movie movie, ArrayList<Movie> arr) {
        boolean isInArray = false;

        for (int i = 0; i < arr.size(); i++) {
            if (arr.get(i).getId() == movie.getId()) { // Check if the Movie object at index i in the array has the same ID as the given movie
                isInArray = true; // Set isInArray to true if a matching movie is found
            }
        }

        return isInArray; // Return the value of isInArray indicating whether the movie is present in the array
    }

    void setUpMoviesCombobox() {

        ArrayList<Movie> movieArr = new ArrayList<>();
        while (movieArr.size() != 50) {
            Movie newMovie = getRandomMovie(); // Get a random movie
            if (!movieIsInArray(newMovie, movieArr)) { // Check if the movie is not already in the array
                movieArr.add(newMovie); // Add the movie to the array
            }
        }

        Movie[] c1 = new Movie[10];
        Movie[] c2 = new Movie[10];
        Movie[] c3 = new Movie[10];
        Movie[] c4 = new Movie[10];
        Movie[] c5 = new Movie[10];

        // Populate the movie arrays for each combo box category
        for (int i = 0; i < 10; i++) {
            c1[i] = movieArr.get(0); // Get the first movie from the movieArr and assign it to c1
            movieArr.remove(0); // Remove the movie from movieArr
        }
        // Repeat the above steps for c2, c3, c4, c5
        for (int i = 0; i < 10; i++) {
            c2[i] = movieArr.get(0);
            movieArr.remove(0);
        }
        for (int i = 0; i < 10; i++) {
            c3[i] = movieArr.get(0);
            movieArr.remove(0);
        }
        for (int i = 0; i < 10; i++) {
            c4[i] = movieArr.get(0);
            movieArr.remove(0);
        }
        for (int i = 0; i < 10; i++) {
            c5[i] = movieArr.get(0);
            movieArr.remove(0);
        }

        DefaultComboBoxModel<Movie> comboModel1 = new DefaultComboBoxModel<>(c1);
        DefaultComboBoxModel<Movie> comboModel2 = new DefaultComboBoxModel<>(c2);
        DefaultComboBoxModel<Movie> comboModel3 = new DefaultComboBoxModel<>(c3);
        DefaultComboBoxModel<Movie> comboModel4 = new DefaultComboBoxModel<>(c4);
        DefaultComboBoxModel<Movie> comboModel5 = new DefaultComboBoxModel<>(c5);

        // Set the combo box models for each combo box
        comboFilm1.setModel(comboModel1);
        comboFilm2.setModel(comboModel2);
        comboFilm3.setModel(comboModel3);
        comboFilm4.setModel(comboModel4);
        comboFilm5.setModel(comboModel5);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    Main f = new Main();
                    f.setLocationRelativeTo(null);
                    f.setResizable(false);
                    f.setVisible(true);
                    f.initFrame();
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    ex.printStackTrace();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGetMovieRecom;
    private javax.swing.JButton btnGetTargetRecom;
    private javax.swing.JComboBox<Movie> comboFilm1;
    private javax.swing.JComboBox<Movie> comboFilm2;
    private javax.swing.JComboBox<Movie> comboFilm3;
    private javax.swing.JComboBox<Movie> comboFilm4;
    private javax.swing.JComboBox<Movie> comboFilm5;
    private javax.swing.JComboBox<String> comboTargetUser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel moviesPanel;
    private javax.swing.JTable moviesTable;
    private javax.swing.JSpinner spinner1;
    private javax.swing.JSpinner spinner2;
    private javax.swing.JSpinner spinner3;
    private javax.swing.JSpinner spinner4;
    private javax.swing.JSpinner spinner5;
    private javax.swing.JSpinner spinnerMoviesK;
    private javax.swing.JSpinner spinnerMoviesX;
    private javax.swing.JSpinner spinnerTargetK;
    private javax.swing.JSpinner spinnerTargetX;
    private javax.swing.JPanel targetPanel;
    private javax.swing.JTable targetTable;
    // End of variables declaration//GEN-END:variables
}
